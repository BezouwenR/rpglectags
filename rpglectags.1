.TH "RPGLECTAGS" "1" "2017 Oct 9"
.SH NAME
rpglectags - Create tags files from ILE RPG source files.
.SH SYNOPSIS
.B rpglectags
[\fIOPTIONS\fR]... \fIFILE\fR...
.SH DESCRIPTION
.B rpglectags
will create a ctags compatible file called
.IR tags.
.PP
The
.B rpglectags
program generate an index (or
.IR tag )
file for objects found in ILE RPG file(s).
This tag file allows these items to be quickly and easily located by a text
editor or other utility. A
.I tag
signifies a language object for which an index entry is available.
.PP
.B rpglectags
will create indices (or
.IR tags )
for the following:
.TP
.B Procedures
.RS
Free format is supported though:
.RS
dcl-proc procName;
.RE
.PP
Fixed format is supported though:
.RS
p procName        b
.RE
.PP
Continues procedures are also supported, i.e.
.RS
p longProdecureName...
.br
p                 b
.RE
.PP
Up to 7 leading spaces will be supported.
.RE
.TP
.B Subroutines
.RS
Free format is supported though:
.RS
begsr subName;
.RE
.PP
Fixed format is supported though:
.RS
c subName           begsr
.RE
.PP
Up to 7 leading spaces will be supported.
.RE
.TP
.B Procedure interface
.RS
Free format is supported though:
.RS
dcl-pi piName;
.br
  parm1;
.br
  parm2;
.br
end-pi;
.RE
.PP
Fixed format is supported though:
.RS
d piName          pi
.br
d parm1
.br
d parm2
.RE
.PP
Continues procedure interfaces are also supported, i.e.
.RS
d veryVeryLongPiName...
.br
p                 pi
.br
p parm1
.br
p parm2
.RE
.PP
Up to 7 leading spaces will be supported.
.RE
.TP
.B Data structures
.RS
Free format is supported though:
.RS
dcl-ds dsName;
.br
  mbr1;
.br
  mbr2;
.br
end-ds;
.RE
.PP
Fixed format is supported though:
.RS
d dsName          ds
.br
d mbr1
.br
d mbr2
.RE
.PP
Continues data structures are also supported, i.e.
.RS
d veryVeryLongDsName...
.br
p                 ds
.br
p mbr1
.br
p mbr2
.RE
.PP
Up to 7 leading spaces will be supported.
.RE
.TP
.B Standalone and constant declaraions
.RS
Free format is supported though:
.RS
dcl-s varName;
.br
dcl-c constName;
.RE
.PP
Fixed format is supported though:
.RS
d varName         s
.br
d constName       c
.RE
.RE
.SH OPTIONS
.TP
\fB\-f\fR \fIfile\fR | \fB\-o\fR \fIfile\fR
write tags til specified file.
Value of
.I -
writes tags to stdout.
Default is
.IR tags .
.TP
\fB\-a\fR
append the tags to an existing tag file
.TP
\fB\-h\fR, \fB\-\-help\fR
print a summary of options and exit.
.TP
\fB\-\-version\fR
print version information on standard output then exit successfully.
.SH EXAMPLES
.PP
To create tags from the file
.IR test.rpgle ,
you'd use:
.RS
rpglectags test.rpgle
.RE
.PP
To create tags from all rpgle and sqlrpgle files recursively, you might say
.RS
find . -type f \\( -name '*.rpgle' -o -name '*.sqlrpgle' \\) \\
.br
       -exec rpglectags {} +
.RE
.PP
More examples:
.RS
rpglectags -f - test2.rpgle        # Print tags to stdout
.br
rpglectags -a test2.rpgle          # Append tags to the 'tags' file
.RE
.SH TAG FILE FORMAT
Each entry in the tag file consists of a separate line, each looking like this
in the most general case:
.RS
{tagname}<TAB>{tagfile}<TAB>{tagaddress};"<TAB>{tagfields}
.RE
.PP
The fields and separators of these lines are specified as follows:
.IP 1.
tag name
.IP 2.
single tab character
.IP 3.
name of the file in which the object associated with the tag is located
.IP 4.
single tab character
.IP 5.
tag address. A non magic pattern enclosed in
.I /
or
.I ?
or a line number.
.IP 6.
a constant
.I ;"
for backward compatibility with vi(1)
.IP 7.
extra fields narrowing down the type of tag entry, i.e.
.IR kind:{fvms} ,
.I struct:nameOfStruct
.SH EXIT STATUS
The following exit values shall be returned:
.IP 0
successful completion.
.IP 1
error parsing command-line argument.
.SH SEE ALSO
.BR ctags (1)
.SH AUTHOR
Andreas Louv <andreas@louv.dk>.
.SH LICENSE
This program is free software; you can redistribute it and/or modify it under
the same terms as Perl itself.
