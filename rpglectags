#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long qw{:config no_ignore_case gnu_compat bundling};
use Carp;

our $APP     = 'rpglectags';
our $VERSION = '1.7.4';

my $currentProc        = undef;
my $currentProcAddress = undef;

my $output_file   = 'tags';
my $append_output = 0;

GetOptions(
  "f|o=s" => \$output_file,
  "a" => \$append_output,
  "help" => sub {
    printf "%s [-f output | -o output] [-a] [--help] [--version] [files]...\n", $APP;
    exit;
  },
  "version" => sub { printf "%s v%s\n", $APP, $VERSION; exit }
) or exit 1;

main();

sub main
{
  my @tags        = get_tags();
  my @tabbed_tags = ();

  if ($append_output) {
    if (open(my $fh, '<', $output_file)) {
      while (my $line = <$fh>) {
        chomp($line);
        push(@tabbed_tags, $line) unless $line =~ /^!/;
      }
      close($fh);
    }
  }

  push(@tabbed_tags,
    join("\t", '!_TAG_FILE_FORMAT', '2', '//'),
    join("\t", '!_TAG_FILE_SORTED', '2', '//'),
    join("\t", '!_TAG_PROGRAM_AUTHOR', 'Andreas Louv', '/andreas@louv.dk/'),
    join("\t", '!_TAG_PROGRAM_NAME', 'rpglectags', '//'),
    join("\t", '!_TAG_PROGRAM_URL', 'https://github.com/andlrc/rpglectags', '/Official Website/'),
    join("\t", '!_TAG_PROGRAM_VERSION', $VERSION, '//')
  );

  foreach my $tag (@tags) {
    my @converted_tag = convert_tag($tag);
    if (@converted_tag) {
      push(@tabbed_tags, @converted_tag);
    }
  }

  # FIXME: Currently we use "uc" instead of "fc" to sort "a" and "A" before
  # an underscore ("_"). How can we use "fc" to archive this?
  @tabbed_tags = sort({ uc($a) cmp uc($b) } @tabbed_tags);

  if ($output_file ne '-') {
    open(my $tags_fh, '>', $output_file)
      or croak("Failed to open tags: $!");
    print $tags_fh $_ . "\n" for @tabbed_tags;
    close($tags_fh);
  }
  else {
    print $_ . "\n" for @tabbed_tags;
  }

  return;
}
# Returns an array of tag hashes that contains:
# tagname, tagfile, tagaddress and tagfields
sub get_tags
{
  my @tags = ();

  while (my $line = <>) {
    $line =~ y/\r//d;

    if ($. == 1 || $line =~ m{ end-proc }xmsi ||
        $line =~ m{ ^ \s{0,7} p [\w\s]{17} \be\b }xmsi) {
      $currentProc        = undef;
      $currentProcAddress = undef;
      next unless $. == 1;
    }

    # Free 7.1 Procedure
    if ($line =~ m{ ( ^ \s* dcl-proc \s+ ( \w+ ) . ) }xmsi) {
      my $name    = $2;
      my $address = create_address($1);

      my $tag = {
        "tagname"    => $name,
        "tagfile"    => $ARGV,
        "tagaddress" => $address,
        "tagfields"  => {
          "kind" => "f"
        },
        "static"     => $ARGV !~ m{ \.rpgleinc $ }xmsi
      };

      push(@tags, $tag);

      $currentProc        = $name;
      $currentProcAddress = $address;

      next;
    }

    # Free 7.1 Pi
    if ($line =~ m{ ( ^ \s* dcl-pi \b. ) }xmsi) {
      my $address = create_address($1, 1);

      # Slurp all lines from dcl-ds ... end-ds
      while ($line !~ m{ \b end-pi \b }xmsi) {
        # We should never iterate over another file. This also prevents infinite
        # iteration with misformed data
        last if eof;
        $line .= <>;
        $line =~ y/\r//d;
      }

      push(@tags, parse_free_dspi($address, $line, 'pi', {
        "kind" => "v"
      }));

      next;
    }

    # Free subroutine declaraion (glorified goto)
    if ($line =~ m{ ( ^ \s* \b begsr \s+ ( \w+ ) . ) }xmsi) {
      my $name    = $2;
      my $address = create_address($1, 1);

      my $tagfields = {
        "kind" => "f"
      };

      my $tag = {
        "tagname"    => $name,
        "tagfile"    => $ARGV,
        "tagaddress" => $address,
        "tagfields"  => $tagfields,
        "static"     => $ARGV !~ m{ \.rpgleinc $ }xmsi
      };

      push(@tags, $tag);

      next;
    }

    # Free 7.1 DS
    if ($line =~ m{ ( ^ \s* \b dcl-ds \s+ ( \w+ ) . ) }xmsi) {
      my $name    = $2;
      my $address = create_address($1, 1);

      my $tagfields = {
        "kind" => "s"
      };

      my $tag = {
        "tagname"    => $name,
        "tagfile"    => $ARGV,
        "tagaddress" => $address,
        "tagfields"  => $tagfields,
        "static"     => $ARGV !~ m{ \.rpgleinc $ }xmsi
      };

      push(@tags, $tag);

      # Based upon another struct
      if ($line =~ m{ \b likeds \( (.*?) \) }xmsi) {
        $tagfields->{typeref} = "struct:$1";
      }
      else {
        # Slurp all lines from dcl-ds ... end-ds
        while ($line !~ m{ \b end-ds \b }xmsi) {
          # We should never iterate over another file. This also prevents infinite
          # iteration with misformed data
          last if eof;
          $line .= <>;
          $line =~ y/\r//d;
        }

        # Don't try to find members if this DS is based on an external database
        # structure
        next if ($line =~ m{ \b extname \b }xmsi);

        push(@tags, parse_free_dspi($address, $line, 'ds', {
          "kind"   => "m",
          "struct" => $name
        }));
      }

      next;
    }

    # Free 7.1 const and standalone
    if ($line =~ m{ ( ^ \s* \b dcl-[sc] \s+ ( \w+ ) . ) }xmsi) {
      my $name    = $2;
      my $address = create_address($1, 1);

      my $tagfields = {
        "kind" => "v"
      };

      my $tag = {
        "tagname"    => $name,
        "tagfile"    => $ARGV,
        "tagaddress" => $address,
        "tagfields"  => $tagfields,
        "static"     => $ARGV !~ m{ \.rpgleinc $ }xmsi
      };

      push(@tags, $tag);

      next;
    }

    # Multi line fixed proc
    if ($line =~ m{ ^ \s{0,7} p \s* \w+ \.\.\. \s* $ }xmsi) {
      push(@tags, fixed_proc($line));
      next;
    }

    # Multi line fixed pi, ds, or pr
    if ($line =~ m{ ^ \s{0,7} d \s* \w+ \.\.\. \s* $ }xmsi) {
      my $tmp = <>;
      if ($tmp =~ m{ \b pi \b }xmsi) {
        push(@tags, fixed_pi($line));
      }
      elsif ($tmp =~ m{ \b ds \b }xmsi) {
        push(@tags, fixed_ds($line));
      }
      next;
    }

    # Fixed Procedure
    if ($line =~ m{ ^ \s{0,7} p [\w\s]{17} \b b \b }xmsi) {
      push(@tags, fixed_proc($line));
      next;
    }

    # Fixed Pi
    if ($line =~ m{ ^ \s{0,7} d [\w\s]{17} pi }xmsi) {
      push(@tags, fixed_pi($line));
      next;
    }

    # Fixed subroutine declaraion (glorified goto)
    if ($line =~ m{ ^ \s{0,7} c [\w\s]{19} \b begsr\b }xmsi) {

      my ($name)  = $line =~ m{ \s{0,7} c \s* (\w+) }xmsi;
      my $address = create_address($line =~ s{ (?<= \b begsr \b ) .* }{}xmsir, 1);

      my $tagfields = {
        "kind" => "f"
      };

      my $tag = {
        "tagname"    => $name,
        "tagfile"    => $ARGV,
        "tagaddress" => $address,
        "tagfields"  => $tagfields,
        "static"     => $ARGV !~ m{ \.rpgleinc $ }xmsi
      };

      push(@tags, $tag);

      next;
    }

    # Fixed DS
    if ($line =~ m{ ^ \s{0,7} d [\w\s]{17} \b ds \b }xmsi) {
      push (@tags, fixed_ds($line));
      next;
    }

    # Fixed const and standalone
    if ($line =~ m{ ^ \s{0,7} d [\w\s]{17} \b [sc] \b }xmsi) {
      my ($name)  = $line =~ m{ ^ \s{0,7} d \s* ( \w+ ) }xmsi;
      my $address = create_address($line =~ s{ (?<= \b [sc] \b ) .*}{}xmsir, 1);

      my $tagfields = {
        "kind" => "v"
      };

      my $tag = {
        "tagname"    => $name,
        "tagfile"    => $ARGV,
        "tagaddress" => $address,
        "tagfields"  => $tagfields,
        "static"     => $ARGV !~ m{ \.rpgleinc $ }xmsi
      };

      push(@tags, $tag);

      next;
    }
  } continue {
    # Make sure $. starts from 1 for each file:
    close ARGV if eof;
  }

  return @tags;
}

sub fixed_proc
{
  my ($line) = @_;
  my $address = create_address($line =~ s{ (?<= \b b \b ) .*}{}xmsir);

  # ILE RPG fixed can be multiply lines if the line is ending in ...
  if ($line =~ s{ \.\.\. \s* $ }{}xmsi) {
    $line .= <> =~ s{ \s{0,7} p \b }{}xmsir;
    $line =~ y/\r//d;
  }

  my ($procName) = $line =~ m{ \s{0,7} p \s+ ( \w+ ) }xmsi;

  my $tag = {
    "tagname"    => $procName,
    "tagfile"    => $ARGV,
    "tagaddress" => $address,
    "tagfields"  => {
      "kind" => "f"
    },
    "static"     => $ARGV !~ m{ \.rpgleinc $ }xmsi
  };

  $currentProc        = $procName;
  $currentProcAddress = $address;

  return $tag;
}
sub fixed_pi
{
  my ($line) = @_;

  my $address = create_address($line =~ s{ ( \b pi \b ) .* }{}xmsir, 1);

  # Slurp all lines from d xxxxxx ... d xxxxxx
  $line .= slurp_fixed_dspi();

  return parse_fixed_dspi($address, $line, 'pi', {
    "kind" => "v"
  });

}
sub fixed_ds
{
  my ($line) = @_;
  my @tags;

  my ($name)  = $line =~ m{ ^ \s{0,7} d \s* ( \w+ ) }xmsi;
  my $address = create_address($line =~ s{ (?<= \b ds ) .* }{}xmsir, 1);

  my $tagfields = {
    "kind" => "s"
  };

  my $tag = {
    "tagname"    => $name,
    "tagfile"    => $ARGV,
    "tagaddress" => $address,
    "tagfields"  => $tagfields,
    "static"     => $ARGV !~ m{ \.rpgleinc $ }xmsi
  };

  push(@tags, $tag);

  # Don't try to find members if this DS is based on another DS
  return @tags if ($line =~ m{ \b likeds \b }xmsi);

  # Slurp all lines from d xxxxxx ... d xxxxxx
  $line .= slurp_fixed_dspi();

  # Don't try to find members if this DS is based on an external database
  # structure
  return @tags if ($line =~ m{ \b extname \b }xmsi);

  push(@tags, parse_fixed_dspi($address, $line, 'ds', {
    "kind"   => "m",
    "struct" => "$name"
  }));

  return @tags;
}

# Contains a tag hash to a <TAB> separated line
sub convert_tag
{
  my ($tag)      = @_;
  my $tagname    = $tag->{tagname};
  my $tagfile    = $tag->{tagfile};
  my $tagaddress = $tag->{tagaddress};
  my $tagfields  = $tag->{tagfields};

  # Sometimes we add wrong tags, some of these doesn't contain all needed
  # information.
  return unless $tagname && $tagfile && $tagaddress;

  my @tag = (
    $tagname,
    $tagfile,
    $tagaddress . ';"'
  );

  for my $key (sort keys %{ $tagfields }) {
    push(@tag, $key . ':' . $tagfields->{$key});
  }

  push(@tag, "file:") if $tag->{static};

  return join("\t", @tag);
}
# Reads multiply lines from the input file. Stops when a line not matching
# (Simplified):
# d hello\s*$
# \s*d hello\s*$
sub slurp_fixed_dspi
{
  my $line = '';
  while (1) {
    # We should never iterate over another file. This also prevents infinite
    # iteration with misformed data
    last if eof;
    my $pos       = tell(ARGV);
    my $next_line = <>;

    # Empty lines doesn't mean the ds/pi stops, but doesn't contain any useful
    # information either, just skip them.
    next if $next_line =~ m{ ^ \s* $ }xmsi;

    if ($next_line !~ m{ ^ \s{0,7} d (?= [\w\s]{17} \W ) \s* \w+ }xmsi) {
      seek(ARGV, $pos, 0);
      last;
    }

    $line .= $next_line;
  }

  $line =~ y/\r//d;

  return $line;
}
# Create tag entries in the @tags array from slurped lines.
sub parse_free_dspi
{
  my ($parentAddress, $line, $type, $tagfields) = @_;

  my @tags = ();

  foreach (split("\n", $line)) {
    next if m{ \b dcl-$type \b | \bend-$type \b }xmsi;

    if (m{ ( ^ \s* ( \w+ ) . ) }xmsi) {
      my $name    = $2;
      my $address = create_address($1);

      my $tag = {
        "tagname"    => $name,
        "tagfile"    => $ARGV,
        "tagaddress" => "$parentAddress;$address",
        "tagfields"  => $tagfields,
        "static"     => $ARGV !~ m{ \.rpgleinc $ }xmsi
      };

      push(@tags, $tag);
    }
  }

  return @tags;
}
# Create tag entries in the @tags array from slurped lines from slurp_fixed_dspi
sub parse_fixed_dspi
{
  my ($parentAddress, $line, $type, $tagfields) = @_;

  my @tags = ();

  foreach (split("\n", $line)) {
    # Remove the first line, as well as lines that doesn't have a name[1]
    # [1] It's possible to align a DS meaning no name is given:
    # d myDs            ds
    # d field1                       256    varying
    # d                                4    varying
    # d field2                       256    varying
    next if m{ ^ \s{0,7} d ( \s{17} | [\w\s]{17} $type ) }xmsi;

    if (m{ ( \s{0,7} d \s* ( \w+ ) . ) }xmsi) {
      my $name    = $2;
      my $address = create_address($1);

      my $tag = {
        "tagname"    => $name,
        "tagfile"    => $ARGV,
        "tagaddress" => "$parentAddress;$address",
        "tagfields"  => $tagfields,
        "static"     => $ARGV !~ m{ \.rpgleinc $ }xmsi
      };

      push(@tags, $tag);
    }
  }

  return @tags;
}
# Create a tag address, everything but '^', '$' and '/' is literal, so
# only those three characters needs to be escaped.
# All addresses should be wrapped in /^.../
sub create_address
{
  my ($address, $addProc) = @_;

  $address =~ y/\n//d;
  $address =~ s{ [\^/\$] }{\\$&}g; # Escape '^', '$' and '/'
  $address = "/^$address/";

  $address = "$currentProcAddress;$address" if $addProc && $currentProcAddress;

  return $address;
}
